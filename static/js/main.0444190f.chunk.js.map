{"version":3,"sources":["components/calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","state","calendar","getCalendar","holidays","getHolidays","fetch","then","response","text","array","split","map","row","push","setState","date","middle","cmpdate","low","high","this","length","Math","floor","Date","getTime","year","month","getFullYear","getMonth","start","end","setMonth","setDate","week","Array","getDate","i","getDay","j","body","id","onClick","showBeforeMonth","showNextMonth","className","weekkey","key","datekey","holiday","isHoliday","class","React","Component","App","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0444190f.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './calendar.scss';\r\n\r\nclass Calendar extends React.Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      calendar: this.getCalendar(2019, 7),\r\n      holidays: []\r\n    };\r\n    this.getHolidays();\r\n  }\r\n\r\n  getHolidays(){\r\n    // 祝日一覧を取得する\r\n    fetch('holidays.csv').then((response) => {\r\n      return response.text();\r\n    }).then((text) => {\r\n      let array = [];\r\n      text.split('\\r\\n').map((row) => {\r\n        array.push(row.split(','));\r\n      });\r\n      this.setState({holidays: array});\r\n    });\r\n  }\r\n\r\n  isHoliday(date){\r\n    let low = 0;\r\n    let high = this.state.holidays.length - 1;\r\n    let middle, cmpdate;\r\n\r\n    // 二部探索で祝日かどうか判定\r\n    while(low <= high){\r\n      middle = Math.floor((low + high) / 2);\r\n      cmpdate = new Date(this.state.holidays[middle][0]);\r\n      if(cmpdate.getTime() === date.getTime()){\r\n        return this.state.holidays[middle][1];\r\n      } else if(cmpdate.getTime() < date.getTime()){\r\n        low = middle + 1;\r\n      } else {\r\n        high = middle - 1;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  showBeforeMonth(){\r\n    let year = this.state.calendar.year;\r\n    let month = this.state.calendar.month - 1;\r\n    if(month === 0){\r\n      year--;\r\n      month = 12;\r\n    }\r\n    this.setState({calendar: this.getCalendar(year, month)});\r\n  }\r\n\r\n  showNextMonth(){\r\n    let year = this.state.calendar.year;\r\n    let month = this.state.calendar.month + 1;\r\n    if(month === 13){\r\n      year++;\r\n      month = 1;\r\n    }\r\n    this.setState({calendar: this.getCalendar(year, month)});\r\n  }\r\n  \r\n  getCalendar(year = new Date().getFullYear(), month = new Date().getMonth()){\r\n    const start = new Date(year, month - 1, 1);\r\n    const end = new Date(year, month - 1, 1);\r\n    end.setMonth(end.getMonth() + 1);\r\n    end.setDate(0); // 翌月月初を求め、さらにその1日前を取得\r\n    \r\n    // 日付連番の配列を作成\r\n    let calendar = [];\r\n    let week = Array(7);\r\n    for(start; start <= end; start.setDate(start.getDate() + 1)){\r\n      // 月初より前の日を取得\r\n      for(let i = start.getDay() - 1, j = new Date(start); i >= 0 && start.getDate() === 1; i--){\r\n        j.setDate(j.getDate() - 1);\r\n        week[i] = new Date(j);\r\n      }\r\n\r\n      week[start.getDay()] = new Date(start);\r\n\r\n      // 月末より後の日を取得\r\n      for(let i = start.getDay() + 1; i < 7; i++){\r\n        start.setDate(start.getDate() + 1);\r\n        week[i] = new Date(start);\r\n      }\r\n\r\n      // 一週間ぶんのデータをcalendar配列に追加\r\n      if(start.getDay() === 6){\r\n        calendar.push(week);\r\n        week = Array(7);\r\n      }\r\n    }\r\n    calendar.push(week);\r\n\r\n    return {\r\n      year: year,\r\n      month: month,\r\n      body: calendar\r\n    };\r\n  }\r\n\r\n  render(){\r\n    return <div id=\"calendar-body\">\r\n      <div id=\"calendar-header\">\r\n        <div id=\"calendar-before-month\" onClick={() => {this.showBeforeMonth()}}>◀</div>\r\n        <h1>{this.state.calendar.year}年{this.state.calendar.month}月</h1>\r\n        <div id=\"calendar-next-month\" onClick={() => this.showNextMonth()}>▶</div>\r\n      </div>\r\n      <table id=\"calendar-table\">\r\n        <tbody>\r\n          <tr id=\"calendar-day-name\">\r\n            <td className=\"sunday\">日</td>\r\n            <td>月</td>\r\n            <td>火</td>\r\n            <td>水</td>\r\n            <td>木</td>\r\n            <td>金</td>\r\n            <td className=\"saturday\">土</td>\r\n          </tr>\r\n          {this.state.calendar.body.map((week, weekkey) => {\r\n            return <tr key={weekkey}>{\r\n              week.map((date, datekey) => {\r\n                if(date != null){\r\n                  if(date.getMonth() + 1 !== this.state.calendar.month){\r\n                    return <td className=\"other-month\" key={datekey}>{date.getDate()}</td>;\r\n                  } else {\r\n                    const holiday = this.isHoliday(date);\r\n                    if(holiday){\r\n                      return <td className=\"sunday\" key={datekey}>\r\n                        {date.getDate()}\r\n                        <span class=\"holiday-name\">{holiday}</span>\r\n                      </td>;\r\n                    } else {\r\n                      switch(date.getDay()){\r\n                        case 0:\r\n                          return <td className=\"sunday\" key={datekey}>{date.getDate()}</td>;\r\n                        case 6:\r\n                          return <td className=\"saturday\" key={datekey}>{date.getDate()}</td>;\r\n                        default:\r\n                          return <td key={datekey}>{date.getDate()}</td>;\r\n                      }\r\n                    }\r\n                  }\r\n                } else {\r\n                  return <td key={datekey}></td>;\r\n                }\r\n              })}\r\n            </tr>;\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Calendar;","import React from 'react';\nimport './App.scss';\nimport Calendar from './components/calendar.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calendar />\n      <p id=\"source-link\">\n        ソースコードは<a href=\"https://github.com/iroirous/ReactSimpleCalendar\" target=\"_blank\">Githubリポジトリ</a>で公開しています。<br />\n        トップページは<a href=\"/\">コチラ</a>から。\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}